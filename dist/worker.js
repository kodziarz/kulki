/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/reflect-metadata/Reflect.js":
/*!**************************************************!*\
  !*** ./node_modules/reflect-metadata/Reflect.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof __webpack_require__.g === \"object\" ? __webpack_require__.g :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process[\"env\" + \"\"] && process[\"env\" + \"\"][\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n\n\n//# sourceURL=webpack://kulki-2/./node_modules/reflect-metadata/Reflect.js?");

/***/ }),

/***/ "./ts/Ball.ts":
/*!********************!*\
  !*** ./ts/Ball.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COLORS: () => (/* binding */ COLORS),\n/* harmony export */   \"default\": () => (/* binding */ Ball)\n/* harmony export */ });\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Validators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Validators */ \"./ts/Validators.ts\");\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\nvar COLORS;\n(function (COLORS) {\n    COLORS[COLORS[\"YELLOW\"] = 0] = \"YELLOW\";\n    COLORS[COLORS[\"BLUE\"] = 1] = \"BLUE\";\n    COLORS[COLORS[\"WHITE\"] = 2] = \"WHITE\";\n    COLORS[COLORS[\"BLACK\"] = 3] = \"BLACK\";\n    COLORS[COLORS[\"GREEN\"] = 4] = \"GREEN\";\n    COLORS[COLORS[\"RED\"] = 5] = \"RED\";\n    COLORS[COLORS[\"GREY\"] = 6] = \"GREY\";\n})(COLORS || (COLORS = {}));\nclass Ball {\n    // możliwość zrobienia dekoratora, że liczba należąca do enuma COLORS\n    constructor(color) {\n        this.color = color;\n    }\n}\n__decorate([\n    (0,_Validators__WEBPACK_IMPORTED_MODULE_1__.Enumerated)(COLORS),\n    __metadata(\"design:type\", Number)\n], Ball.prototype, \"color\", void 0);\n//export default Ball\n// function color(): any {\n//     let actualPropertyValue: number = null // to w sumie powoduje, że pole już nie jest readonly xd\n//     // ale bez tego byśmy używali settera w setterze i by była nieskończona rekurencja\n//     return function (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<any>) {\n//         Object.defineProperty(target, propertyKey, {\n//             get: function () {\n//                 return actualPropertyValue\n//             },\n//             set: function (value: number) {\n//                 if (!(value in COLORS))\n//                     throw new Error(\"Wrong color value. Passed color value should belong to COLORS enum.\")\n//                 actualPropertyValue = value\n//             }\n//         })\n//     }\n// }\n\n\n//# sourceURL=webpack://kulki-2/./ts/Ball.ts?");

/***/ }),

/***/ "./ts/Board.ts":
/*!*********************!*\
  !*** ./ts/Board.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Board)\n/* harmony export */ });\n/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Field */ \"./ts/Field.ts\");\n/* harmony import */ var _Validators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Validators */ \"./ts/Validators.ts\");\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (undefined && undefined.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n\n\nclass Board {\n    constructor(w, h) {\n        this.fields = [];\n        /**\n         * Checks if such a {@link Field~Field} exists on the {@link Board~Board}\n         * @param x X coordinate of {@link Field~Field}.\n         * @param y Y coordinate of {@link Field~Field}.\n         * @returns True if a {@link Field~Field} with such coordinates exists.\n         */\n        this.doesFieldExist = (x, y) => {\n            return !(this.fields[x] == null || this.fields[x] == undefined || this.fields[x][y] == null || this.fields[x][y] == undefined);\n        };\n        this.getHeight = () => {\n            return this.fields[0].length;\n        };\n        this.getWidth = () => {\n            return this.fields.length;\n        };\n        /**\n         * Returns a {@link Field~Field} by specific coordinates.\n         * @param x X coordinate of {@link Field~Field}.\n         * @param y Y coordinate of {@link Field~Field}.\n         * @returns {@link Field~Field} if it exists, otherwise null.\n         */\n        this.getField = (x, y) => {\n            if (!this.doesFieldExist(x, y))\n                return null;\n            return this.fields[x][y];\n        };\n        /**\n         * Returns a list of {@link Field~Field | Fields} which {@link Board~Board} contains.\n         * @returns Copy of two-dimensional array of {@link Field~Field | Fields}.\n         */\n        this.getFields = () => {\n            return this.fields;\n        };\n        this.fields = [...new Array(w)].map((e, x) => { return [...new Array(h)].map((e, y) => { return new _Field__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, y); }); });\n    }\n    moveBall(start, finish) {\n        finish.setBall(start.getBall());\n        start.deleteBall();\n    }\n    /**\n     * Generates {@link Board~Board} instance from JSON data.\n     * @param o JSON object which is going to be parsed.\n     * @returns {@link Board~Board} object parsed from JSON data.\n     */\n    static fromJSON(o) {\n        if (o == null || o == undefined)\n            throw new Error(\"Board cannot be parsed from null.\");\n        let result = Object.fromEntries(Object.entries(o).map(([key, value]) => {\n            if (key == \"fields\") {\n                return [key, [...value].map((column) => { return [...column].map((field) => { return Object.assign(new _Field__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0), field); }); })];\n            }\n            else if (key == \"finish\") {\n                return [key, _Field__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromJSON(value)];\n            }\n            return [key, value];\n        }));\n        return Object.assign(new Board(0, 0), result);\n    }\n}\n__decorate([\n    _Validators__WEBPACK_IMPORTED_MODULE_1__.ValidateNotNull,\n    __param(0, _Validators__WEBPACK_IMPORTED_MODULE_1__.NotNull),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Board)\n], Board, \"fromJSON\", null);\n\n\n//# sourceURL=webpack://kulki-2/./ts/Board.ts?");

/***/ }),

/***/ "./ts/Field.ts":
/*!*********************!*\
  !*** ./ts/Field.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Field)\n/* harmony export */ });\n/* harmony import */ var _Ball__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ball */ \"./ts/Ball.ts\");\n\nclass Field {\n    constructor(x, y) {\n        this.ball = null;\n        this.x = x;\n        this.y = y;\n        this._isLegal = true;\n    }\n    isLegal() {\n        return this._isLegal;\n    }\n    getBall() {\n        return this.ball;\n    }\n    setBall(newBall) {\n        this.ball = newBall;\n        this._isLegal = false;\n    }\n    deleteBall() {\n        this.ball = null;\n        this._isLegal = true;\n    }\n    getX() {\n        return this.x;\n    }\n    getY() {\n        return this.y;\n    }\n}\n/**\n * Generates {@link Field~Field} instance from JSON data.\n * @param o JSON object which is going to be parsed.\n * @returns {@link Field~Field} object parsed from JSON data.\n */\nField.fromJSON = (o) => {\n    let result = Object.fromEntries(Object.entries(o).map(([key, value]) => {\n        if (key == \"ball\") {\n            return [key, Object.assign(new _Ball__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0), value)];\n        }\n        return [key, value];\n    }));\n    return Object.assign(new Field(result.x, result.y), result);\n};\n\n\n//# sourceURL=webpack://kulki-2/./ts/Field.ts?");

/***/ }),

/***/ "./ts/Path.ts":
/*!********************!*\
  !*** ./ts/Path.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Path)\n/* harmony export */ });\n/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Field */ \"./ts/Field.ts\");\n/* harmony import */ var _Validators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Validators */ \"./ts/Validators.ts\");\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (undefined && undefined.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n\n\n/**\n * Provides access to list of {@link Field~Field | Fields} in currently reaserched path to target.\n * Main aim is to manage permissions to data and actions performed on the object.\n * Used by {@link Walker~Walker} and {@link Pathfinder~Pathfinder}.\n */\nclass Path {\n    constructor() {\n        this.fields = [];\n        this.addField = (field) => {\n            this.fields.push(field);\n        };\n        this.getLastField = () => {\n            return this.fields[this.fields.length - 1];\n        };\n        this.getLength = () => {\n            return this.fields.length;\n        };\n    }\n    forEachField(callback) {\n        this.fields.forEach((field, i) => {\n            callback(field, i);\n        });\n    }\n    /**\n     * Generates {@link Path~Path} instance from JSON data.\n     * @param o JSON object which is going to be parsed.\n     * @returns {@link Path~Path} object parsed from JSON data.\n     */\n    static fromJSON(o) {\n        let result = Object.fromEntries(Object.entries(o).map(([key, value]) => {\n            if (key == \"fields\") {\n                console.log(`path.fields: ${value}`);\n                return [key, value.map((field) => {\n                        return _Field__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromJSON(field);\n                    })];\n            }\n            return [key, value];\n        }));\n        return Object.assign(new Path(), result);\n    }\n}\n__decorate([\n    _Validators__WEBPACK_IMPORTED_MODULE_1__.ValidateNotNull,\n    __param(0, _Validators__WEBPACK_IMPORTED_MODULE_1__.NotNull),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Path)\n], Path, \"fromJSON\", null);\n\n\n//# sourceURL=webpack://kulki-2/./ts/Path.ts?");

/***/ }),

/***/ "./ts/PathfinderMessage.ts":
/*!*********************************!*\
  !*** ./ts/PathfinderMessage.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PathfinderMessageTypes: () => (/* binding */ PathfinderMessageTypes)\n/* harmony export */ });\n/**\n * Contains types of {@link PathfinderMessage}.\n */\nvar PathfinderMessageTypes;\n(function (PathfinderMessageTypes) {\n    /**\n     * {@link Pathfinder~Pathfinder} sends a request to {@link Walker~Walker} to start pathfinding.\n     * {@link PathfinderMessage~PathfinderMessage} with this type requires\n     * {@link PathfinderMessage~PathfinderMessage.start} and {@link PathfinderMessage~PathfinderMessage.finish}\n     */\n    PathfinderMessageTypes[PathfinderMessageTypes[\"PATHFIND\"] = 0] = \"PATHFIND\";\n    /**\n     * {@link Walker~Walker} emits an event, that he met a new {@link Field~Field}.\n     * {@link Pathfinder~Pathfinder} decides then, whether to maintain him or not.\n     */\n    PathfinderMessageTypes[PathfinderMessageTypes[\"FIELD_REACHED\"] = 1] = \"FIELD_REACHED\";\n    /**\n     * {@link Pathfinder~Pathfinder} sends request to {@link Walker~Walker} to continue pathfinding.\n     * Used after {@link Pathfinder~Pathfinder} gets {@link FIELD_REACHED} message and is interpreted by\n     * {@link Walker~Walker} as a permission to \"split\" (send {@link COWORKER_NEEDED} messages), if needed.\n     */\n    PathfinderMessageTypes[PathfinderMessageTypes[\"CONTINUE_PATHFINDING\"] = 2] = \"CONTINUE_PATHFINDING\";\n    /**\n     * {@link Walker~Walker} emits an event, that he needs to \"split\", to go in few directions.\n     * {@link Pathfinder~Pathfinder} receives then the new {@link Walker~Walker} object with a new\n     * {@link Field~Field} added to {@link Path~Path}\n     */\n    PathfinderMessageTypes[PathfinderMessageTypes[\"COWORKER_NEEDED\"] = 3] = \"COWORKER_NEEDED\";\n    /**\n     * {@link Pathfinder~Pathfinder} sens a request to {@link Walker~Walker} to continue pathfinding with some initial data.\n     * Used when {@link Pathfinder~Pathfinder} receives {@link COWORKER_NEEDED} message.\n     */\n    PathfinderMessageTypes[PathfinderMessageTypes[\"CONTINUE_PATHFINDING_BY_DATA\"] = 4] = \"CONTINUE_PATHFINDING_BY_DATA\";\n})(PathfinderMessageTypes || (PathfinderMessageTypes = {}));\n\n\n//# sourceURL=webpack://kulki-2/./ts/PathfinderMessage.ts?");

/***/ }),

/***/ "./ts/Validators.ts":
/*!**************************!*\
  !*** ./ts/Validators.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Enumerated: () => (/* binding */ Enumerated),\n/* harmony export */   NotNull: () => (/* binding */ NotNull),\n/* harmony export */   ValidateNotNull: () => (/* binding */ ValidateNotNull)\n/* harmony export */ });\n/** @hidden Checks, wheather Class property value belongs to {@link Ball.COLORS} enum. */\n// export function Color(target: any, propertyKey: string): any {\n//     Object.defineProperty(target, propertyKey, {\n//         get: function () {\n//             return this[\"_\" + propertyKey]\n//         },\n//         set: function (value: number) {\n//             if (!(value in COLORS))\n//                 throw new Error(\"Wrong color value. Passed color value should belong to COLORS enum.\")\n//             this[\"_\" + propertyKey] = value\n//             console.log(\"target: \", target);\n//         }\n//     })\n// }\n// export function PathfinderMessageType(target: any, propertyKey: string): any {\n//     Object.defineProperty(target, propertyKey, {\n//         get: function () {\n//             return this[\"_\" + propertyKey]\n//         },\n//         set: function (value: number) {\n//             if (!(value in PathfinderMessageTypes))\n//                 throw new Error(\"Wrong PathfinderMessageType value. Passed color value should belong to PathfinderMessageTypes enum.\")\n//             this[\"_\" + propertyKey] = value\n//             console.log(\"target: \", target);\n//         }\n//     })\n// }\n/**\n *  Restricts property to accept only values listed in given number Enum.\n * @param enumerator Enumerator which values the property sholud accept.\n * @remarks It is a property decorator.\n */\nfunction Enumerated(enumerator) {\n    return function PathfinderMessageType(target, propertyKey) {\n        Object.defineProperty(target, propertyKey, {\n            get: function () {\n                return this[\"_\" + propertyKey];\n            },\n            set: function (value) {\n                if (!(value in enumerator))\n                    throw new Error(\"Wrong field \\\"\" + propertyKey + \"\\\" value. Passed value should belong to enum:\\n\" + JSON.stringify(enumerator, null, 5));\n                this[\"_\" + propertyKey] = value;\n            }\n        });\n    };\n}\nconst notNullPrefix = \"__metadata_\";\n/**Modifies a decorated method, to respect {@link NotNull:function | @NotNull} decoration. */\nfunction ValidateNotNull(target, methodName, descriptor) {\n    var _a;\n    let original = descriptor.value;\n    let meta = (_a = Object.getOwnPropertyDescriptor(target, notNullPrefix + methodName)) === null || _a === void 0 ? void 0 : _a.value;\n    if (meta != undefined)\n        descriptor.value = function (...args) {\n            for (let i of meta)\n                if (args[i] == null)\n                    throw new Error(\"Parameter number \" + i + \" was passed null, altough it is annotated with @NotNull decorator.\");\n            return original.apply(this, args);\n        };\n}\n/**\n * Restricts decorated parameter not to be null. To work needs the method, where the parameter is, to be\n * decorated with {@link ValidateNotNull:function | @ValidateNotNull} decorator.\n */\nfunction NotNull(target, methodName, paramIndex) {\n    //console.log(\"function: \", target[methodName].toString());\n    var _a;\n    let currentMeta = (_a = Object.getOwnPropertyDescriptor(target, notNullPrefix + methodName)) === null || _a === void 0 ? void 0 : _a.value;\n    if (currentMeta instanceof Array) {\n        Object.defineProperty(target, notNullPrefix + methodName, {\n            value: [...currentMeta, paramIndex]\n        });\n    }\n    else {\n        Object.defineProperty(target, notNullPrefix + methodName, {\n            value: [paramIndex]\n        });\n    }\n}\n\n\n//# sourceURL=webpack://kulki-2/./ts/Validators.ts?");

/***/ }),

/***/ "./ts/Walker.ts":
/*!**********************!*\
  !*** ./ts/Walker.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Walker)\n/* harmony export */ });\n/* harmony import */ var _Board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Board */ \"./ts/Board.ts\");\n/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Field */ \"./ts/Field.ts\");\n/* harmony import */ var _Path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Path */ \"./ts/Path.ts\");\n/* harmony import */ var _Validators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Validators */ \"./ts/Validators.ts\");\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (undefined && undefined.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n\n\n\n\nclass Walker {\n    constructor() {\n        /**\n         * Emited when Walker reaches new {@link Field~Field}. Used by {@link Pathfinder~Pathfinder} to decide, if the Walker should be maintained.\n         * @event\n         * @param walker {@link Walker~Walker}, who reached the {@link Field~Field}.\n         */\n        this.onFieldReached = (walker) => { };\n        /**\n         * Emited when {@link Walker~Walker} needs to \"split\" into few directions.\n         * @event\n         * @param walker New generated {@link Walker~Walker}\n         */\n        this.onCoworkerNeeded = (walker) => { };\n        /**\n         * Emited when {@link Walker~Walker} reaches the finish.\n         * @event\n         * @param walker {@link Walker~Walker} object which reached the finish.\n         */\n        this.onFinishReached = (walker) => { };\n        /**\n         * Method starts work of {@link Walker~Walker} to find {@link Path~Path}.\n         * @param start Start {@link Field~Field} for researched {@link Path~Path}.\n         * @param finish {@link Field~Field} where the {@link Path~Path} should lead to.\n         * @remarks Emits {@link onFieldReached:function} when reached new {@link Field~Field}.\n         */\n        this.findPath = (board, start, finish) => {\n            this.board = board;\n            this.path.addField(start);\n            this.finish = finish;\n            this.continuePathfinding();\n        };\n        /**\n         * Handles {@link PathfinderMessage~PathfinderMessageTypes.CONTINUE_PATHFINDING} message.\n         * Sends request to create new {@link worker | workers} and takes the first possible option (there is always\n         * at least one).\n         * @remarks Emits {@link onCoworkerNeeded:function} and {@link onFieldReached:function} events.\n         */\n        this.continuePathfinding = () => {\n            let possible = this.getPossibleDirectionsArray();\n            for (let i = 1; i < possible.length; i++) {\n                let coworker = this.duplicate();\n                coworker.getPath().addField(possible[i]);\n                this.onCoworkerNeeded(coworker);\n            }\n            if (possible.length != 0) {\n                // the exception is when there is a single legal field next to start.\n                // then the Walker starts in it and has no possible moves\n                // (Walker cannot even return - start is always illegal, since there is a ball)\n                this.path.addField(possible[0]);\n            }\n            // when no legal move, then return current path - it will be discarded,\n            // since it is not better then current \n            this.onFieldReached(this);\n        };\n        /**\n         * Finds {@link Path~Path} starting with some initial data (method assumes that the {@link Walker~Walker}\n         * does not pathfind from the beginng of a {@link Path~Path}, because received {@link Walker~Walker} has some\n         * non-empty {@link Path~Path}).\n         * Used when {@link Walker~Walker} meets crossroads and needs to \"split\".\n         * @param walker Walker object containing initial data to pathfind.\n         * @remarks Emits {@link onFieldReached:function} event just after recieivng data ({@link Pathfinder~Pathfinder} needs\n         * to check, if his existence makes sense).\n         */\n        this.continuePathByData = (walker) => {\n            this.board = walker.board;\n            this.path = walker.getPath();\n            this.finish = walker.getFinish();\n            this.continuePathfinding();\n        };\n        /**@getter */\n        this.getPath = () => {\n            return this.path;\n        };\n        this.getFinish = () => {\n            return this.finish;\n        };\n        /**\n         * @public\n         * @returns List of {@link Field~Field | Fields} where the {@link Walker~Walker} can go.\n         * @remarks Used after receiving {@link PathfinderMessage~PathfinderMessageTypes.CONTINUE_PATHFINDING} message.\n         */\n        this.getPossibleDirectionsArray = () => {\n            let lastField = this.path.getLastField();\n            // console.log(\"this.path.getLastField(): \", this.path.getLastField());\n            let result = [];\n            let lastX = lastField.getX();\n            let lastY = lastField.getY();\n            if (this.board.doesFieldExist(lastX - 1, lastY)\n                && this.board.getField(lastX - 1, lastY).isLegal()) {\n                result.push(this.board.getField(lastX - 1, lastY));\n            }\n            if (this.board.doesFieldExist(lastX, lastY + 1)\n                && this.board.getField(lastX, lastY + 1).isLegal()) {\n                result.push(this.board.getField(lastX, lastY + 1));\n            }\n            if (this.board.doesFieldExist(lastX + 1, lastY)\n                && this.board.getField(lastX + 1, lastY).isLegal()) {\n                result.push(this.board.getField(lastX + 1, lastY));\n            }\n            if (this.board.doesFieldExist(lastX, lastY - 1)\n                && this.board.getField(lastX, lastY - 1).isLegal()) {\n                result.push(this.board.getField(lastX, lastY - 1));\n            }\n            return result;\n        };\n        /**\n         * Checks, if {@link Walker~Walker} has reached the target.\n         * @public\n         * @deprecated Everything which could be done be the function is performed by\n         * {@link Pathfinder~Pathfinder.walkerDidReachedFinish:function} inside {@link Pathfinder~Pathfinder}.\n         * @returns True if {@link Walker~Walker} has reached the {@link finish:member} {@link Field~Field},\n         * otherwise false.\n         */\n        this.isThisTheEnd = () => {\n            return this.path.getLastField().getX() == this.finish.getX()\n                && this.path.getLastField().getY() == this.finish.getY();\n        };\n        // toJSON = () => {\n        //     let result = Object.fromEntries(Object.entries(this).filter(([key, value]) => { return !(value instanceof Function) }))\n        //     result = Object.fromEntries(Object.entries(this).map(([key, value]) => {\n        //         if (value.toJSON != undefined)\n        //             return [key, value.toJSON()]\n        //         return [key, value]\n        //     }))\n        //     return result\n        // }\n        /**\n         * Creates a copy of the {@link Walker~Walker}.\n         * @returns Copied {@link Walker~Walker}.\n         * @remarks This should not be performed by a spread (\\{... \\}) operator, because then the child objects (e.g.\n         * {@link Path~Path}) would be copied by reference.\n         */\n        this.duplicate = () => {\n            return Walker.fromJSON(JSON.parse(JSON.stringify(this)));\n        };\n        this.path = new _Path__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    }\n    /**\n     * Generates {@link Walker~Walker} instance from JSON data.\n     * @param o JSON object which is going to be parsed.\n     * @returns {@link Walker~Walker} object parsed from JSON data.\n     */\n    static fromJSON(o) {\n        let result = Object.fromEntries(Object.entries(o).map(([key, value]) => {\n            if (key == \"path\") {\n                return [key, _Path__WEBPACK_IMPORTED_MODULE_2__[\"default\"].fromJSON(value)];\n            }\n            else if (key == \"finish\") {\n                return [key, _Field__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromJSON(value)];\n            }\n            else if (key == \"board\") {\n                return [key, _Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromJSON(value)];\n            }\n            return [key, value];\n        }));\n        return Object.assign(new Walker(), result);\n    }\n}\n__decorate([\n    _Validators__WEBPACK_IMPORTED_MODULE_3__.ValidateNotNull,\n    __param(0, _Validators__WEBPACK_IMPORTED_MODULE_3__.NotNull),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Walker)\n], Walker, \"fromJSON\", null);\n\n\n//# sourceURL=webpack://kulki-2/./ts/Walker.ts?");

/***/ }),

/***/ "./ts/worker.ts":
/*!**********************!*\
  !*** ./ts/worker.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Board */ \"./ts/Board.ts\");\n/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Field */ \"./ts/Field.ts\");\n/* harmony import */ var _PathfinderMessage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PathfinderMessage */ \"./ts/PathfinderMessage.ts\");\n/* harmony import */ var _Walker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Walker */ \"./ts/Walker.ts\");\n/**\n * Script, which is invoked by {@link Pathfinder~Pathfinder} on a new thread, to calculate possible routes.\n * The script itself, creates a new {@link Walker~Walker} and provides communication between\n * {@link Pathfinder~Pathfinder}(who is on the main thread) and {@link Walker~Walker}(who is on the worker's thread)\n *  by passing {@link PathfinderMessage~PathfinderMessage}.\n * @packageDocumentation\n */\n\n\n\n\nlet walker = new _Walker__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\nlet id = null;\n// listeners on Walker (child)\nwalker.onFieldReached = (walker) => {\n    self.postMessage(JSON.parse(JSON.stringify({\n        id: id,\n        type: _PathfinderMessage__WEBPACK_IMPORTED_MODULE_2__.PathfinderMessageTypes.FIELD_REACHED,\n        walker: walker\n    })));\n};\nwalker.onCoworkerNeeded = (walker) => {\n    self.postMessage(JSON.parse(JSON.stringify({\n        id: id,\n        type: _PathfinderMessage__WEBPACK_IMPORTED_MODULE_2__.PathfinderMessageTypes.COWORKER_NEEDED,\n        walker: walker\n    })));\n};\n// listeners on self (on events emited by {@link Pathfinder~Pathfinder} who is de facto parent)\nonmessage = (message) => {\n    let m = message.data;\n    switch (m.type) {\n        case _PathfinderMessage__WEBPACK_IMPORTED_MODULE_2__.PathfinderMessageTypes.PATHFIND:\n            id = m.id;\n            walker.findPath(_Board__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromJSON(m.board), _Field__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromJSON(m.start), _Field__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromJSON(m.finish));\n            break;\n        case _PathfinderMessage__WEBPACK_IMPORTED_MODULE_2__.PathfinderMessageTypes.CONTINUE_PATHFINDING:\n            walker.continuePathfinding();\n            break;\n        case _PathfinderMessage__WEBPACK_IMPORTED_MODULE_2__.PathfinderMessageTypes.CONTINUE_PATHFINDING_BY_DATA:\n            id = m.id;\n            walker.continuePathByData(_Walker__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fromJSON(m.walker));\n            break;\n        default:\n            console.error(\"Unkown type of Pathfinder message.\");\n    }\n};\n\n\n//# sourceURL=webpack://kulki-2/./ts/worker.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./ts/worker.ts");
/******/ 	
/******/ })()
;